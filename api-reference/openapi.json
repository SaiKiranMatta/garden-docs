{
  "openapi": "3.1.0",
  "info": {
    "title": "Garden API",
    "version": "2.0.0",
    "description": "API specification for various endpoints"
  },
  "servers": [
    {
      "url": "https://{environment}.garden.finance/v1",
      "variables": {
        "environment": {
          "default": "api",
          "enum": [
            "api",
            "api.testnet"
          ]
        }
      }
    }
  ],
  "security": [
    {
      "garden-app-id": []
    }
  ],
  "components": {
    "securitySchemes": {
      "garden-app-id": {
        "type": "apiKey",
        "name": "garden-app-id",
        "in": "header",
        "description": "API key to identify the application"
      }
    },
    "schemas": {
      "Chain": {
        "oneOf": [
          {
            "type": "string",
            "title": "mainnet",
            "enum": [
              "bitcoin",
              "ethereum",
              "base",
              "arbitrum",
              "bera",
              "corn",
              "starknet",
              "hyperliquid",
              "solana",
              "botanix"
            ]
          },
          {
            "type": "string",
            "title": "testnet",
            "enum": [
              "bitcoin_testnet",
              "ethereum_sepolia",
              "base_sepolia",
              "arbitrum_sepolia",
              "starknet_sepolia",
              "hyperliquid_testnet",
              "solana_testnet",
              "monad_testnet",
              "citrea_testnet"
            ]
          }
        ]
      },
      "ChainWithAssets": {
        "allOf": [
          {"$ref": "#/components/schemas/ChainVerbose"},
          {
            "type": "object",
            "properties": {
              "assets": {
                "type": "array",
                "items": {"$ref": "#/components/schemas/AssetVerbose"}
              }
            }
          }
        ]
      },
      "ChainVerbose": {
        "type": "object",
        "title": "Chain Information",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/Chain"
          },
          "icon": {
            "type": "string"
          },
          "confirmation_target": {
            "type": "integer"
          },
          "source_timelock": {
            "type": "integer"
          },
          "destination_timelock": {
            "type": "integer"
          }
        }
      },
      "AffiliateFeeAsset": {
        "oneOf": [
          {
            "type": "string",
            "title": "mainnet",
            "enum": [
              "ethereum:cbbtc",
              "ethereum:usdc",
              "ethereum:seed",
              "arbitrum:usdc",
              "base:cbbtc",
              "base:usdc"
            ]
          },
          {
            "type": "string",
            "title": "testnet",
            "enum": [
              "ethereum_sepolia:wbtc",
              "ethereum_sepolia:usdc"
            ]
          }
        ]
      },
      "Asset": {
        "oneOf": [
          {
            "type": "string",
            "title": "mainnet",
            "enum": [
              "bitcoin:btc",
              "ethereum:cbbtc",
              "ethereum:wbtc",
              "ethereum:usdc",
              "ethereum:seed",
              "ethereum:ibtc",
              "arbitrum:wbtc",
              "arbitrum:usdc",
              "arbitrum:ibtc",
              "base:cbbtc",
              "base:usdc",
              "bera:lbtc",
              "starknet:wbtc",
              "hyperevm:ubtc",
              "corn:btcn",
              "unichain:wbtc",
              "unichain:usdc",
              "botanix:btc",
              "solana:sol"
            ]
          },
          {
            "type": "string",
            "title": "testnet",
            "enum": [
              "bitcoin_testnet:btc",
              "ethereum_sepolia:wbtc",
              "arbitrum_sepolia:wbtc",
              "arbitrum_sepolia:seed",
              "arbitrum_sepolia:ibtc",
              "base_sepolia:wbtc",
              "base_sepolia:usdt",
              "base_sepolia:ibtc",
              "monad_testnet:cbbtc",
              "monad_testnet:usdc",
              "starknet_sepolia:wbtc",
              "citrea_testnet:wcbtc",
              "citrea_testnet:cbtc",
              "solana_testnet:sol"
            ]
          }
        ]
      },
      "AssetVerbose": {
        "type": "object",
        "title": "Asset Information",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/Asset"
          },
          "chain": {
            "$ref": "#/components/schemas/Chain"
          },
          "icon": {
            "type": "string"
          },
          "htlc": {
            "type": "string",
            "nullable": true
          },
          "token": {
            "type": "string",
            "description": "if this is null, then the asset is considered the gas token",
            "nullable": true
          },
          "decimals": {
            "type": "integer",
            "example": 8
          },
          "min_amount": {
            "type": "integer"
          },
          "max_amount": {
            "type": "integer"
          }
        }
      },
      "Account": {
        "type": "object",
        "properties": {
          "asset": {
            "$ref": "#/components/schemas/Asset"
          },
          "owner": {
            "type": "string"
          },
          "amount": {
            "type": "string"
          }
        }
      },
      "Swap": {
        "type": "object",
        "properties": {
          "created_at": {
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          },
          "deleted_at": {
            "type": "string",
            "nullable": true
          },
          "swap_id": {
            "type": "string"
          },
          "chain": {
            "$ref": "#/components/schemas/Chain"
          },
          "asset": {
            "$ref": "#/components/schemas/Asset"
          },
          "initiator": {
            "type": "string"
          },
          "redeemer": {
            "type": "string"
          },
          "timelock": {
            "type": "integer"
          },
          "filled_amount": {
            "type": "string"
          },
          "amount": {
            "type": "string"
          },
          "secret_hash": {
            "type": "string"
          },
          "secret": {
            "type": "string"
          },
          "instant_refund_hash": {
            "type": "string"
          },
          "initiate_tx_hash": {
            "type": "string"
          },
          "redeem_tx_hash": {
            "type": "string"
          },
          "refund_tx_hash": {
            "type": "string"
          },
          "initiate_block_number": {
            "type": "string",
            "nullable": true
          },
          "redeem_block_number": {
            "type": "string",
            "nullable": true
          },
          "refund_block_number": {
            "type": "string",
            "nullable": true
          },
          "required_confirmations": {
            "type": "integer"
          },
          "current_confirmations": {
            "type": "integer"
          }
        }
      },
      "Order": {
        "type": "object",
        "properties": {
          "created_at": {
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          },
          "deleted_at": {
            "type": "string",
            "nullable": true
          },
          "source_swap": {
            "$ref": "#/components/schemas/Swap"
          },
          "destination_swap": {
            "$ref": "#/components/schemas/Swap"
          },
          "create_order": {
            "$ref": "#/components/schemas/OrderRequest"
          }
        }
      },
      "Address": {
        "type": "object",
        "properties": {
          "chain": {
            "$ref": "#/components/schemas/Chain"
          },
          "address": {
            "type": "string",
            "example": "0x057ff5cacab1d75df04e8e9d349f0d8dd92e87b989244b934d9b09bc99fc4173"
          }
        }
      },
      "Liquidity": {
        "type": "object",
        "properties": {
          "asset": {
            "$ref": "#/components/schemas/Asset"
          },
          "balance": {
            "type": "string",
            "example": "2005081260295471559422"
          },
          "virtual_balance": {
            "type": "string",
            "example": "2005081260295471559422"
          },
          "readable_balance": {
            "type": "number",
            "example": 2005.08126030
          },
          "fiat_value": {
            "type": "number",
            "example": 223.5006887196492
          }
        }
      },
      "Solver": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "addresses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Address"
            }
          },
          "liquidity": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Liquidity"
            }
          }
        }
      },
      "AffiliateFee": {
        "type": "object",
        "requred": [],
        "properties": {
          "address": {"type": "string"},
          "asset": {"$ref": "#/components/schemas/AffiliateFeeAsset"},
          "fee": {"type": "number", "example": 0.1 }
        }
      },
      "OrderRequest": {
        "type": "object",
        "required": ["source", "destination"],
        "properties": {
          "source": {
            "$ref": "#/components/schemas/Account"
          },
          "destination": {
            "$ref": "#/components/schemas/Account"
          },
          "slippage": {
            "type": "number",
            "example": 0.5
          },
          "secret_hash": {
            "type": "string",
            "example": "0x057ff5cacab1d75df04e8e9d349f0d8dd92e87b989244b934d9b09bc99fc4173"
          },
          "nonce": {
            "type": "string"
          },
          "affiliate_fees": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AffiliateFee"
            }
          }
        }
      },
      "InitiateActionRequest": {
        "type": "object",
        "title": "Initiate",
        "properties": {
          "signature": {
            "type": "string"
          }
        },
        "required": [
          "signature"
        ]
      },
      "RedeemActionRequest": {
        "type": "object",
        "title": "Redeem",
        "properties": {
          "secret": {
            "type": "string"
          }
        },
        "required": [
          "secret"
        ]
      },
      "RefundActionRequest": {
        "type": "object",
        "title": "Refund",
        "properties": {}
      },
      "InstantRefundActionRequest": {
        "type": "object",
        "title": "Instant Refund",
        "properties": {
          "signature": {
            "type": "string"
          }
        },
        "required": [
          "signature"
        ]
      },
      "PaginatedData": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {}
          },
          "page": {
            "type": "integer"
          },
          "total_pages": {
            "type": "integer"
          },
          "total_items": {
            "type": "integer"
          },
          "per_page": {
            "type": "integer"
          }
        }
      },
      "Response": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "Ok",
              "Error"
            ]
          },
          "error": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "BitcoinInitiateRequest": {
        "type": "object",
        "required": [
          "to",
          "amount"
        ],
        "properties": {
          "to": {
            "type": "string"
          },
          "amount": {
            "type": "number"
          }
        }
      },
      "EVMTransaction": {
        "type": "object",
        "properties": {
          "to": {
            "type": "string"
          },
          "value": {
            "type": "string"
          },
          "chain_id": {
            "type": "number"
          },
          "data": {
            "type": "string"
          },
          "gas_limit": {
            "type": "number"
          }
        }
      },
      "EVMTypedData": {
        "type": "object",
        "properties": {
          "types": {
            "properties": {
              "EIP712Domain": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "type": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "message": {
            "type": "object",
            "properties": {
              "redeemer": {
                "type": "string"
              },
              "timelock": {
                "type": "number"
              },
              "amount": {
                "type": "number"
              },
              "secretHash": {
                "type": "string"
              }
            }
          },
          "domain": {
            "properties": {
              "name": {
                "type": "string"
              },
              "version": {
                "type": "string"
              },
              "chainId": {
                "type": "string"
              },
              "verifyingContract": {
                "type": "string"
              }
            }
          }
        }
      },
      "EVMInitiateRequest": {
        "type": "object",
    
        "required": [
          "transaction",
          "typed_data"
        ],
        "properties": {
          "transaction": {
            "$ref": "#/components/schemas/EVMTransaction"
          },
          "typed_data": {
            "$ref": "#/components/schemas/EVMTypedData"
          }
        }  
      },
      "SolanaInitiateRequest": {
        "type": "object",
        "properties": {
          "method": {
            "type": "string", 
            "enum": ["initiate"]
          },
          "args": {
            "type": "object",
            "properties": {
              "amount": { "type": "string", "example": "100000000" },
              "expiresIn": { "type": "number", "example": 3600 },
              "redeemer": { "type": "string" },
              "secretHash": { "type": "string", "example": "0x057ff5cacab1d75df04e8e9d349f0d8dd92e87b989244b934d9b09bc99fc4173" }
            }
          },
          "programId": { "type": "string" },
          "idl": { "type": "object" }
        }
      },
      "InitiateRequest": {
        "anyOf": [
          {
            "title": "bitcoin",
            "$ref": "#/components/schemas/BitcoinInitiateRequest"
          },
          {
            "title": "evm",
            "$ref": "#/components/schemas/EVMInitiateRequest"
          },
          {
            "title": "starknet",
            "$ref": "#/components/schemas/EVMTypedData"
          },
          {
            "title": "solana",
            "$ref": "#/components/schemas/SolanaInitiateRequest"
          }
        ]
      },
      "QuoteAsset": {
        "type": "object",
        "properties": {
          "asset": { "$ref": "#/components/schemas/Asset" },
          "amount": { "type": "string", "example": "1000000" },
          "display": { "type": "string", "example": 0.01 },
          "value": { "type": "string", "example": "100" }
        }
      },
      "Quote": {
        "type": "object",
        "properties": {
          "source": { "$ref": "#/components/schemas/QuoteAsset" },
          "destination": { "$ref": "#/components/schemas/QuoteAsset" }
        }
      },
      "InstantRefundHashResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "Ok",
              "Error"
            ]
          },
          "result": {
            "type": "string"
          },
          "error": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "QuoteStrategiesResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "Ok",
              "Error"
            ]
          },
          "result": {
            "type": "object",
            "properties": {
              "strategy_id": {
                "$ref": "#/components/schemas/Strategy"
              }
            },
            "nullable": true
          },
          "error": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "OrdersResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "Ok",
              "Error"
            ]
          },
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Order"
            }
          },
          "error": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "OrderResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "Ok",
              "Error"
            ]
          },
          "result": {
            "$ref": "#/components/schemas/Order"
          },
          "error": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "SolverResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": [
              "Ok",
              "Error"
            ]
          },
          "result": {
            "$ref": "#/components/schemas/Solver"
          },
          "error": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "ActionResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Response"
          },
          {
            "type": "object",
            "required": [
              "result"
            ],
            "properties": {
              "result": {
                "type": "string"
              }
            }
          }
        ]
      }
    },
    "examples": {
      "OrderPairBTCWBTC": {
        "summary": "Order pair for Native Bitcoin -> WBTC on Etherum",
        "value": "bitcoin:primary::ethereum:0x795dcb58d1cd4789169d5f938ea05e17eceb68ca"
      }
    }
  },
  "paths": {
    "/orders/{order}/instant-refund-hash": {
      "get": {
        "summary": "Get instant refund hash for the given swap",
        "responses": {
          "200": {
            "description": "Get the swap with the given id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InstantRefundHashResponse"
                }
              }
            }
          }
        }
      }
    },
    "/quote": {
      "get": {
        "summary": "Get quote price",
        "parameters": [
          {
            "in": "query",
            "name": "from",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Asset"
            }
          },
          {
            "in": "query",
            "name": "to",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Asset"
            }
          },
          {
            "in": "query",
            "name": "amount",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "exact_out",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Quote information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Quote"
                }
              }
            }
          }
        }
      }
    },
    "/health": {
      "get": {
        "summary": "Get Server health",
        "responses": {
          "200": {
            "description": "Get Server Health",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response"
                }
              }
            }
          }
        }
      }
    },
    "/chains": {
      "get": {
        "summary": "Get all thes supported chains and assets",
        "responses": {
          "200": {
            "description": "Get assets",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChainWithAssets"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/assets": {
      "get": {
        "summary": "Get all the supported assets on the given chain",
        "parameters": [
          {
            "in": "query",
            "name": "from",
            "schema": {
              "$ref": "#/components/schemas/Asset"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Array of Assets",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AssetVerbose"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/fees": {
      "get": {
        "summary": "Get swap fees",
        "responses": {
          "200": {
            "description": "Total swap fees",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response"
                }
              }
            }
          }
        }
      }
    },
    "/volume": {
      "get": {
        "summary": "Get swap volume",
        "responses": {
          "200": {
            "description": "Total swap volume",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response"
                }
              }
            }
          }
        }
      }
    },
    "/orders": {
      "get": {
        "summary": "Get all orders",
        "responses": {
          "200": {
            "description": "List of orders",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Order"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create order",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Once the order is created, the next step is to intiate on the source chain, the response contains all the required information to initiate on the source chain",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InitiateRequest"
                }
              }
            }
          }
        }
      }
    },
    "/orders/{order}": {
      "get": {
        "summary": "Get matched order by ID",
        "parameters": [
          {
            "in": "path",
            "name": "order",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Matched order details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Update swap by doing an action",
        "tags": [
          "Swaps"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "action",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "initiate",
                "redeem",
                "refund",
                "instant-refund"
              ]
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/InitiateActionRequest"
                  },
                  {
                    "$ref": "#/components/schemas/RedeemActionRequest"
                  },
                  {
                    "$ref": "#/components/schemas/RefundActionRequest"
                  },
                  {
                    "$ref": "#/components/schemas/InstantRefundActionRequest"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Order created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response"
                }
              }
            }
          }
        }
      }
    },
    "/solvers/{solver}": {
      "get": {
        "summary": "Get solver details",
        "parameters": [
          {
            "in": "path",
            "name": "solver",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Solver's response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SolverResponse"
                }
              }
            }
          }
        }
      }
    },
    "/users/{user}/orders": {
      "get": {
        "summary": "Get all matched orders by user",
        "parameters": [
          {
            "in": "path",
            "name": "user",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "status",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User's matched orders",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrdersResponse"
                }
              }
            }
          }
        }
      }
    },
    "/users/{user}/count": {
      "get": {
        "summary": "Get order count for user",
        "parameters": [
          {
            "in": "path",
            "name": "user",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User's order count",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response"
                }
              }
            }
          }
        }
      }
    },
    "/solvers/{solver}/liquidity": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "solver",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "summary": "Get liquidity information",
        "responses": {
          "200": {
            "description": "Liquidity information",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Liquidity"
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}