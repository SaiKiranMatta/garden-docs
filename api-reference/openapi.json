{
  "openapi": "3.1.0",
  "info": {
    "title": "Garden API", 
    "version": "2.0.0",
    "description": "API specification for various endpoints"
  },
  "tags": [
    {
      "name": "Quotes",
      "description": "Endpoints for getting quote and attestations"
    },
    {
      "name": "Users", 
      "description": "Endpoints for getting, creating and modifying user details"
    },
    {
      "name": "Orders",
      "description": "Endpoints for getting, creating and modifying order details"
    },
    {
      "name": "Swaps",
      "description": "Endpoints for getting, creating and modifying swap details"
    }
  ],
  "servers": [
    {
      "url": "https://{environment}.garden.finance/v1",
      "variables": {
        "environment": {
          "default": "api",
          "enum": ["api", "api.testnet"]
        }
      }
    }
  ],
  "security": [
    {
      "garden-app-id": []
    }
  ],
  "components": {
    "securitySchemes": {
      "garden-app-id": {
        "type": "apiKey",
        "name": "garden-app-id",
        "in": "header",
        "description": "API key to identify the application"
      }
    },
    "schemas": {
      "Chain": {
        "oneOf": [
          {
            "type": "string",
            "title": "mainnet",
            "enum": ["bitcoin", "ethereum", "base", "arbitrum", "bera", "corn", "starknet", "hyperliquid", "solana", "botanix"]
          },
          {
              "type": "string",
              "title": "testnet", 
              "enum": ["bitcoin_testnet", "ethereum_sepolia", "base_sepolia", "arbitrum_sepolia", "starknet_sepolia", "hyperliquid_testnet", "solana_testnet", "monad_testnet", "citrea_testnet"]
          }
        ]
      },
      "ChainVerbose": {
        "type": "object",
        "title": "Chain Information",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/Chain"
          },
          "icon": {
            "type": "string"
          },
          "confirmation_target": {
            "type": "integer"
          },
          "source_timelock": {
            "type": "integer"
          },
          "destination_timelock": {
            "type": "integer"
          }
        }
      },
      "Asset": {
        "oneOf": [
          {
            "type": "string",
            "title": "mainnet", 
            "enum": ["cbbtc", "btc", "wbtc", "ibtc", "lbtc", "btcn", "usdc", "seed", "sol"]
          },
          {
            "type": "string",
            "title": "testnet", 
            "enum": ["cbbtc", "btc", "wbtc", "ibtc", "lbtc", "btcn", "usdc", "seed", "sol", "usdt"]
          }
        ]
      },
      "AssetVerbose": {
        "type": "object",
        "title": "Asset Information",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/Asset"
          },
          "chain": {
            "$ref": "#/components/schemas/Chain"
          },
          "icon": {
            "type": "string"
          },
          "htlc": {
            "type": "string",
            "nullable": true
          },
          "onchain_id": {
            "type": "string",
            "description": "if this is null, then the asset is considered the gas token",
            "nullable": true
          },
          "decimals": {
            "type": "integer",
            "example": 8
          },
          "min_amount": {
            "type": "integer"
          },
          "max_amount": {
            "type": "integer"
          }
        }
      },
      "Account": {
        "type": "object",
        "properties": {
          "chain": { 
            "$ref": "#/components/schemas/Chain"
          },
          "asset": {
            "$ref": "#/components/schemas/Asset"
          },
          "owner": { "type": "string" },
          "delegate": { "type": "string"}
        }
      },
      "Swap": {
        "type": "object",
        "properties": {
          "created_at": { "type": "string" },
          "updated_at": { "type": "string" },
          "deleted_at": { "type": "string", "nullable": true },
          "swap_id": { "type": "string" },
          "chain": { "$ref": "#/components/schemas/Chain" },
          "asset": { "$ref": "#/components/schemas/Asset" },
          "initiator": { "type": "string" },
          "redeemer": { "type": "string" },
          "timelock": { "type": "integer" },
          "filled_amount": { "type": "string" },
          "amount": { "type": "string" },
          "secret_hash": { "type": "string" },
          "secret": { "type": "string" },
          "instant_refund_hash": { "type": "string" },
          "initiate_tx_hash": { "type": "string" },
          "redeem_tx_hash": { "type": "string" },
          "refund_tx_hash": { "type": "string" },
          "initiate_block_number": { "type": "string", "nullable": true },
          "redeem_block_number": { "type": "string", "nullable": true },
          "refund_block_number": { "type": "string", "nullable": true },
          "required_confirmations": { "type": "integer" },
          "current_confirmations": { "type": "integer" }
        }
      },
      "Order": {
        "type": "object",
        "properties": {
          "created_at": { "type": "string" },
          "updated_at": { "type": "string" },
          "deleted_at": { "type": "string", "nullable": true },
          "source_swap": {
            "$ref": "#/components/schemas/Swap"
          },
          "destination_swap": {
            "$ref": "#/components/schemas/Swap"
          },
          "create_order": {
            "$ref": "#/components/schemas/OrderRequest"
          }
        }
      },
      "Address": {
        "type": "object",
        "properties": {
          "chain": {
            "$ref": "#/components/schemas/ChainVerbose"
          }, 
          "address": {
            "type": "string",
            "example": "0x057ff5cacab1d75df04e8e9d349f0d8dd92e87b989244b934d9b09bc99fc4173"
          }
        }
      },
      "Balance": {
        "type": "object",
        "properties": {
          "asset": {
            "$ref": "#/components/schemas/AssetVerbose"
          },
          "balance": {
            "type": "string",
            "example": "2005081260295471559422"
          },
          "virtual_balance": {
            "type": "string",
            "example": "2005081260295471559422"
          },
          "readable_balance": {
            "type": "number",
            "example": 2005.08126030
          },
          "fiat_value": {
            "type": "number",
            "example": 223.5006887196492
          }
        }
      },
      "Solver": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "addresses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Address"
            }
          },
          "balances": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Balance"
            }
          }
        }
      },
      "OrderRequest": {
        "type": "object",
        "properties": {
          "source": { "$ref": "#/components/schemas/Account" },
          "destination": { "$ref": "#/components/schemas/Account" },
          "secret_hash": { "type": "string" },
          "nonce": { "type": "string" },
          "affiliate_fees": { "type": "array" }
        }
      },
      "InitiateActionRequest": {
        "type": "object",
        "title": "Initiate",
        "properties": {
          "signature": { "type": "string" }
        },
        "required": ["signature"]
      },
      "RedeemActionRequest": {
        "type": "object",
        "title": "Redeem",
        "properties": {
          "secret": { "type": "string" }
        },
        "required": ["secret"]
      },
      "RefundActionRequest": {
          "type": "object",
          "title": "Refund",
          "properties": {}
      },
      "InstantRefundActionRequest": {
          "type": "object",
          "title": "Instant Refund",
          "properties": {
              "signature": { "type": "string" }
          },
        "required": ["signature"]
      },
      "PaginatedData": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {}
          },
          "page": { "type": "integer" },
          "total_pages": { "type": "integer" },
          "total_items": { "type": "integer" },
          "per_page": { "type": "integer" }
        }
      },
      "Response": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": ["Ok", "Error"]
          },
          "error": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "QuotePriceResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": ["Ok", "Error"]
          },
          "result": {
            "type": "object",
            "properties": {
              "quotes": {
                "type": "object",
                "properties": {
                  "strategy_id": "quote-price"
                }
              }
            },
            "nullable": true
          },
          "error": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "InstantRefundHashResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": ["Ok", "Error"]
          },
          "result": {
            "type": "string"
          },
          "error": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "QuoteStrategiesResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": ["Ok", "Error"]
          },
          "result": {
            "type": "object",
            "properties": {
              "strategy_id": {
                "$ref": "#/components/schemas/Strategy"
              }
            },
            "nullable": true
          },
          "error": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "OrdersResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": ["Ok", "Error"]
          },
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Order"
            }
          },
          "error": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "OrderResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": ["Ok", "Error"]
          },
          "result": {
            "$ref": "#/components/schemas/Order"
          },
          "error": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "SolverResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "enum": ["Ok", "Error"]
          },
          "result": {
            "$ref": "#/components/schemas/Solver"
          },
          "error": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "ActionResponse": {
        "allOf": [
          {"$ref": "#/components/schemas/Response"},
          {
            "result": {
              "type": "string"
            }
          }
        ]
      }
    },
    "examples": {
      "OrderPairBTCWBTC": {
        "summary": "Order pair for Native Bitcoin -> WBTC on Etherum",
        "value": "bitcoin:primary::ethereum:0x795dcb58d1cd4789169d5f938ea05e17eceb68ca"
      }
    }
  },
  "paths": {
    "/swaps": {
      "get": {
        "summary": "Get all swaps",
        "tags": ["Swaps"],
        "responses": {
          "200": {
            "description": "List of all swaps",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Swap"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/swaps/{id}": {
      "get": {
        "summary": "Get swap by id",
        "tags": ["Swaps"],
        "responses": {
          "200": {
            "description": "Get the swap with the given id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Swap"
                }
              }
            }
          }
        }
      },
      "patch": {
        "summary": "Update swap by doing an action",
        "tags": ["Swaps"],
        "parameters": [
            {
              "in": "path",
              "name": "id",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "action",
              "required": true,
              "schema": {
                "type": "string",
                "enum": ["initiate", "redeem", "refund", "instant-refund"]
              }
            }
          ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                  "anyOf": [
                      {"$ref": "#/components/schemas/InitiateActionRequest" },
                      {"$ref": "#/components/schemas/RedeemActionRequest" },
                      {"$ref": "#/components/schemas/RefundActionRequest" },
                      {"$ref": "#/components/schemas/InstantRefundActionRequest" }
                  ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Order created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MatchedOrderResponse"
                }
              }
            }
          }
        }
      }
    },
    "/swaps/{id}/instant-refund-hash": {
      "get": {
        "summary": "Get instant refund hash for the given swap",
        "tags": ["Swaps"],
        "responses": {
          "200": {
            "description": "Get the swap with the given id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InstantRefundHashResponse"
                }
              }
            }
          }
        }
      }
    },
    "/quote": {
      "get": {
        "summary": "Get quote price",
        "tags": ["Quote"],
        "parameters": [
          {
            "in": "query",
            "name": "from_chain",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Chain"
            }
          },
          {
            "in": "query",
            "name": "from_asset",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Asset"
            }
          },
          {
            "in": "query",
            "name": "to_chain",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Chain"
            }
          },
          {
            "in": "query",
            "name": "to_asset",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Asset"
            }
          },
          {
            "in": "query",
            "name": "amount",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "exact_out",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Quote information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuotePriceResponse"
                }
              }
            }
          }
        }
      }
    },
    "/health": {
      "get": {
        "summary": "Get Server health",
        "tags": ["Orderbook"],
        "responses": {
          "200": {
            "description": "Get Server Health",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response"
                }
              }
            }
          }
        }
      }
    },
    "/assets": {
      "get": {
        "summary": "Get Assets",
        "tags": ["Orderbook"],
        "parameters": [
          {
            "in": "query",
            "name": "from_chain",
            "schema": {
              "$ref": "#/components/schemas/Chain"
            }
          },
          {
            "in": "query",
            "name": "from_asset",
            "schema": {
              "$ref": "#/components/schemas/Asset"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get assets",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AssetVerbose"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/fees": {
      "get": {
        "summary": "Get swap fees",
        "tags": ["Orderbook"],
        "responses": {
          "200": {
            "description": "Total swap fees",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response"
                }
              }
            }
          }
        }
      }
    },
    "/volume": {
      "get": {
        "summary": "Get swap volume",
        "tags": ["Orderbook"],
        "responses": {
          "200": {
            "description": "Total swap volume",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response"
                }
              }
            }
          }
        }
      }
    },
    "/orders": {
      "get": {
        "summary": "Get all orders",
        "tags": ["Orderbook"],
        "responses": {
          "200": {
            "description": "List of orders",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MatchedOrderResponse"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create order",
        "tags": ["Orderbook"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOrderRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Order created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MatchedOrderResponse"
                }
              }
            }
          }
        }
      }
    },
    "/orders/{order}": {
      "get": {
        "summary": "Get matched order by ID",
        "tags": ["Orderbook"],
        "parameters": [
          {
            "in": "path",
            "name": "order",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Matched order details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MatchedOrderResponse"
                }
              }
            }
          }
        }
      }
    },
    "/solvers/{solver}": {
      "get": {
        "summary": "Get solver details",
        "parameters": [
          {
            "in": "path",
            "name": "solver",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Solver's response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SolverResponse"
                }
              }
            }
          }
        }
      }
    },
    "/users/{user}/orders": {
      "get": {
        "summary": "Get all matched orders by user",
        "tags": ["Orderbook"],
        "parameters": [
          {
            "in": "path",
            "name": "user",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "status",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User's matched orders",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MatchedOrderResponse"
                }
              }
            }
          }
        }
      }
    },
    "/users/{user}/count": {
      "get": {
        "tags": ["Orderbook"],
        "summary": "Get order count for user",
        "parameters": [
          {
            "in": "path",
            "name": "user",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User's order count",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response"
                }
              }
            }
          }
        }
      }
    },
    "/solvers/{solver}/liquidity": {
      "get": {
        "tags": ["Quote"],
        "parameters": [
          {
            "in": "path",
            "name": "solver",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "summary": "Get liquidity information",
        "responses": {
          "200": {
            "description": "Liquidity information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LiquidityResponse"
                }
              }
            }
          }
        }
      }
    },
    "/solvers/{solver}/committed-funds": {
      "get": {
        "summary": "Get solver committed funds",
        "tags": ["Orderbook"],
        "parameters": [
          {
            "in": "path",
            "name": "solver",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "chain",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "asset",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Solver's committed funds",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Response"
                }
              }
            }
          }
        }
      }
    }
  }
} 